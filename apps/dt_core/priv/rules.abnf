if-rule = "IF" condition "THEN" SPS consequent !!!
	[_op, condition, _then, _, cons] = string_values
	expression = "if" <> to_string(condition) <> "do :" <> to_string(cons) <> " end"
	|> to_char_list
	{:ok, state, 
		%{code: expression}
	}
!!!

operator = ">" / "<" / "==" / "!=" !!!
	{:ok, state, :lists.flatten(values)}	
!!!

condition = *( ( wrapcond / simplecond ) [ ("AND" / "OR") condition ] )

wrapcond = SPS "(" simplecond [ ("AND" / "OR") simplecond ] ")" SPS

simplecond = SPS lcondition SPS operator SPS rcondition SPS

lcondition = *( 1*ALPHA "." ) 1*ALPHA !!!
	{:ok, state, :lists.flatten(values)}	
!!!

rcondition = DQUOTE *( ALPHA / SP / DIGIT ) DQUOTE / 1*DIGIT !!!
	{:ok, state, :lists.flatten(values)}	
!!!

consequent = 1*ALPHA !!!
	{:ok, state, :lists.flatten(values)}	
!!!

DQUOTE = %x22

SPS = *SP !!!
	{:ok, state, :lists.flatten(values)}	
!!!

SP = %x20 

ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z

DIGIT = %x30-39

